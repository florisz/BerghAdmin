// <auto-generated />
using System;
using BerghAdmin.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BerghAdmin.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240323174811_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BerghAdmin.Authorization.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BerghAdmin.Data.Betaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BICTegenpartij")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BatchID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Bedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BetalingType")
                        .HasColumnType("int");

                    b.Property<string>("BetalingsKenmerk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DatumTijd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IncassantID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Koers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MachtigingsKenmerk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Munt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NaamInitierendePartij")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NaamTegenpartij")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NaamUiteindelijkePartij")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Omschrijving1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Omschrijving2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Omschrijving3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OorspronkelijkBedrag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OorspronkelijkMunt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RedenRetour")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tegenrekening")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactieReferentie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Volgnummer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Betalingen");
                });

            modelBuilder.Entity("BerghAdmin.Data.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsMergeTemplate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Documenten");
                });

            modelBuilder.Entity("BerghAdmin.Data.Donateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adres")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAdres")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<bool>("IsVerwijderd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Land")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobiel")
                        .HasColumnType("longtext");

                    b.Property<string>("Opmerkingen")
                        .HasColumnType("longtext");

                    b.Property<string>("Plaats")
                        .HasColumnType("longtext");

                    b.Property<string>("Postcode")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefoon")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Donateur");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BerghAdmin.Data.Donatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Bedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DatumTijd")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DonateurId")
                        .HasColumnType("int");

                    b.Property<int?>("FactuurId")
                        .HasColumnType("int");

                    b.Property<int?>("KentaaDonatieId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DonateurId");

                    b.HasIndex("FactuurId");

                    b.HasIndex("KentaaDonatieId");

                    b.ToTable("Donaties");
                });

            modelBuilder.Entity("BerghAdmin.Data.Factuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("Bedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("float");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmailTekstId")
                        .HasColumnType("int");

                    b.Property<int?>("FactuurTekstId")
                        .HasColumnType("int");

                    b.Property<int>("FactuurType")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerzonden")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Nummer")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmailTekstId");

                    b.HasIndex("FactuurTekstId");

                    b.ToTable("Facturen");
                });

            modelBuilder.Entity("BerghAdmin.Data.Fietstocht", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("GeplandeDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("KentaaProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Fietstochten", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("FietstochtId");
                        });
                });

            modelBuilder.Entity("BerghAdmin.Data.Golfdag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("GeplandeDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("KentaaProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Locatie")
                        .HasColumnType("longtext");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Golfdagen", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("GolfdagId");
                        });
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzActie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AantalDonaties")
                        .HasColumnType("int");

                    b.Property<string>("Achternaam")
                        .HasColumnType("longtext");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<bool>("Beeindigd")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatieDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DoelBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DoelBedragBereikt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DoneerUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExterneReferentie")
                        .HasColumnType("longtext");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("longtext");

                    b.Property<int?>("PersoonId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotaalBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tussenvoegsels")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WijzigDatum")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId")
                        .IsUnique();

                    b.HasIndex("PersoonId")
                        .IsUnique();

                    b.ToTable("BihzActies");
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzDonatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountBic")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountIban")
                        .HasColumnType("longtext");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("BetaalId")
                        .HasColumnType("longtext");

                    b.Property<string>("BetaalOmschrijving")
                        .HasColumnType("longtext");

                    b.Property<int>("BetaalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BetaalStatusOp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BetaalTransactieId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatieDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<decimal>("DonatieBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<decimal>("NettoBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PersoonId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("RegistratieFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("RegistratieFeeBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotaalBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransactionKosten")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WijzigDatum")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DonationId")
                        .IsUnique();

                    b.ToTable("BihzDonaties", (string)null);
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AantalDonaties")
                        .HasColumnType("int");

                    b.Property<bool>("Beeindigd")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatieDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DoelBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DoelBedragBereikt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DonatieUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExterneReferentie")
                        .HasColumnType("longtext");

                    b.Property<int?>("FietstochtId")
                        .HasColumnType("int");

                    b.Property<bool>("Gesloten")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotaalBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WijzigDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Zichtbaar")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("BihzProjects");
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Achternaam")
                        .HasColumnType("longtext");

                    b.Property<string>("Adres")
                        .HasColumnType("longtext");

                    b.Property<string>("Adres2")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatieDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("GeboorteDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Geslacht")
                        .HasColumnType("longtext");

                    b.Property<string>("HuisNummer")
                        .HasColumnType("longtext");

                    b.Property<string>("HuisNummerToevoeging")
                        .HasColumnType("longtext");

                    b.Property<string>("Land")
                        .HasColumnType("longtext");

                    b.Property<int?>("PersoonId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasColumnType("longtext");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Straat")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefoon")
                        .HasColumnType("longtext");

                    b.Property<string>("Tussenvoegsels")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WijzigDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Woonplaats")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PersoonId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BihzUsers");
                });

            modelBuilder.Entity("BerghAdmin.Data.MagazineJaar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AmbassadeurId")
                        .HasColumnType("int");

                    b.Property<string>("Jaar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AmbassadeurId");

                    b.ToTable("MagazineJaren");
                });

            modelBuilder.Entity("BerghAdmin.Data.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MeervoudBeschrijving")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Rollen");
                });

            modelBuilder.Entity("BerghAdmin.Data.VerzondenMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("InhoudId")
                        .HasColumnType("int");

                    b.Property<string>("Onderwerp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("VerzendDatum")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InhoudId");

                    b.ToTable("VerzondenMails");
                });

            modelBuilder.Entity("FietstochtPersoon", b =>
                {
                    b.Property<int>("DeelnemersId")
                        .HasColumnType("int");

                    b.Property<int>("FietstochtenId")
                        .HasColumnType("int");

                    b.HasKey("DeelnemersId", "FietstochtenId");

                    b.HasIndex("FietstochtenId");

                    b.ToTable("FietstochtPersoon");
                });

            modelBuilder.Entity("GolfdagGolfdagSponsor", b =>
                {
                    b.Property<int>("GolfdagenGesponsoredId")
                        .HasColumnType("int");

                    b.Property<int>("SponsorenId")
                        .HasColumnType("int");

                    b.HasKey("GolfdagenGesponsoredId", "SponsorenId");

                    b.HasIndex("SponsorenId");

                    b.ToTable("GolfdagGolfdagSponsor");
                });

            modelBuilder.Entity("GolfdagPersoon", b =>
                {
                    b.Property<int>("DeelnemersId")
                        .HasColumnType("int");

                    b.Property<int>("GolfdagenId")
                        .HasColumnType("int");

                    b.HasKey("DeelnemersId", "GolfdagenId");

                    b.HasIndex("GolfdagenId");

                    b.ToTable("GolfdagPersoon");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersoonRol", b =>
                {
                    b.Property<int>("PersonenId")
                        .HasColumnType("int");

                    b.Property<int>("RollenId")
                        .HasColumnType("int");

                    b.HasKey("PersonenId", "RollenId");

                    b.HasIndex("RollenId");

                    b.ToTable("PersoonRol");
                });

            modelBuilder.Entity("PersoonVerzondenMail", b =>
                {
                    b.Property<int>("GeadresseerdenId")
                        .HasColumnType("int");

                    b.Property<int>("GeadresseerdenId1")
                        .HasColumnType("int");

                    b.HasKey("GeadresseerdenId", "GeadresseerdenId1");

                    b.HasIndex("GeadresseerdenId1");

                    b.ToTable("MailGeadresseerden", (string)null);
                });

            modelBuilder.Entity("PersoonVerzondenMail1", b =>
                {
                    b.Property<int>("ccGeadresseerdenId")
                        .HasColumnType("int");

                    b.Property<int>("ccGeadresseerdenId1")
                        .HasColumnType("int");

                    b.HasKey("ccGeadresseerdenId", "ccGeadresseerdenId1");

                    b.HasIndex("ccGeadresseerdenId1");

                    b.ToTable("MailccGeadresseerden", (string)null);
                });

            modelBuilder.Entity("PersoonVerzondenMail2", b =>
                {
                    b.Property<int>("bccGeadresseerdenId")
                        .HasColumnType("int");

                    b.Property<int>("bccGeadresseerdenId1")
                        .HasColumnType("int");

                    b.HasKey("bccGeadresseerdenId", "bccGeadresseerdenId1");

                    b.HasIndex("bccGeadresseerdenId1");

                    b.ToTable("MailbccGeadresseerden", (string)null);
                });

            modelBuilder.Entity("BerghAdmin.Data.Persoon", b =>
                {
                    b.HasBaseType("BerghAdmin.Data.Donateur");

                    b.Property<string>("Achternaam")
                        .HasColumnType("longtext");

                    b.Property<bool>("Buggy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAdresExtra")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("GeboorteDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Geslacht")
                        .HasColumnType("int");

                    b.Property<string>("Handicap")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReserve")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KledingMaten")
                        .HasColumnType("longtext");

                    b.Property<string>("Nummer")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Tussenvoegsel")
                        .HasColumnType("longtext");

                    b.Property<string>("Voorletters")
                        .HasColumnType("longtext");

                    b.Property<string>("Voornaam")
                        .HasColumnType("longtext");

                    b.HasIndex("ProjectId");

                    b.HasIndex("IsVerwijderd", "EmailAdres")
                        .IsUnique();

                    b.ToTable("Personen");
                });

            modelBuilder.Entity("BerghAdmin.Data.Sponsor", b =>
                {
                    b.HasBaseType("BerghAdmin.Data.Donateur");

                    b.Property<int?>("CompagnonId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersoon1Id")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersoon2Id")
                        .HasColumnType("int");

                    b.Property<string>("DebiteurNummer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("CompagnonId");

                    b.HasIndex("ContactPersoon1Id");

                    b.HasIndex("ContactPersoon2Id");

                    b.ToTable("Sponsoren");
                });

            modelBuilder.Entity("BerghAdmin.Data.Ambassadeur", b =>
                {
                    b.HasBaseType("BerghAdmin.Data.Sponsor");

                    b.Property<string>("AangebrachtDoor")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DatumAangebracht")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DatumAanmelding")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DatumBeeindiging")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<string>("MagazijnFotograaf")
                        .HasColumnType("longtext");

                    b.Property<string>("MagazijnSchrijver")
                        .HasColumnType("longtext");

                    b.Property<string>("OpmerkingenLogo")
                        .HasColumnType("longtext");

                    b.Property<int>("Pakket")
                        .HasColumnType("int");

                    b.Property<string>("Partner")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ToegezegdBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotaalBedrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Ambassadeur", (string)null);
                });

            modelBuilder.Entity("BerghAdmin.Data.GolfdagSponsor", b =>
                {
                    b.HasBaseType("BerghAdmin.Data.Sponsor");

                    b.ToTable("GolfdagSponsor", (string)null);
                });

            modelBuilder.Entity("BerghAdmin.Data.Donatie", b =>
                {
                    b.HasOne("BerghAdmin.Data.Donateur", "Donateur")
                        .WithMany("Donaties")
                        .HasForeignKey("DonateurId");

                    b.HasOne("BerghAdmin.Data.Factuur", "Factuur")
                        .WithMany()
                        .HasForeignKey("FactuurId");

                    b.HasOne("BerghAdmin.Data.Kentaa.BihzDonatie", "KentaaDonatie")
                        .WithMany()
                        .HasForeignKey("KentaaDonatieId");

                    b.Navigation("Donateur");

                    b.Navigation("Factuur");

                    b.Navigation("KentaaDonatie");
                });

            modelBuilder.Entity("BerghAdmin.Data.Factuur", b =>
                {
                    b.HasOne("BerghAdmin.Data.Document", "EmailTekst")
                        .WithMany()
                        .HasForeignKey("EmailTekstId");

                    b.HasOne("BerghAdmin.Data.Document", "FactuurTekst")
                        .WithMany()
                        .HasForeignKey("FactuurTekstId");

                    b.Navigation("EmailTekst");

                    b.Navigation("FactuurTekst");
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzActie", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithOne("BihzActie")
                        .HasForeignKey("BerghAdmin.Data.Kentaa.BihzActie", "PersoonId");
                });

            modelBuilder.Entity("BerghAdmin.Data.Kentaa.BihzUser", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithOne("BihzUser")
                        .HasForeignKey("BerghAdmin.Data.Kentaa.BihzUser", "PersoonId");
                });

            modelBuilder.Entity("BerghAdmin.Data.MagazineJaar", b =>
                {
                    b.HasOne("BerghAdmin.Data.Ambassadeur", null)
                        .WithMany("MagazineJaren")
                        .HasForeignKey("AmbassadeurId");
                });

            modelBuilder.Entity("BerghAdmin.Data.VerzondenMail", b =>
                {
                    b.HasOne("BerghAdmin.Data.Document", "Inhoud")
                        .WithMany()
                        .HasForeignKey("InhoudId");

                    b.Navigation("Inhoud");
                });

            modelBuilder.Entity("FietstochtPersoon", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("DeelnemersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.Fietstocht", null)
                        .WithMany()
                        .HasForeignKey("FietstochtenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GolfdagGolfdagSponsor", b =>
                {
                    b.HasOne("BerghAdmin.Data.Golfdag", null)
                        .WithMany()
                        .HasForeignKey("GolfdagenGesponsoredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.GolfdagSponsor", null)
                        .WithMany()
                        .HasForeignKey("SponsorenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GolfdagPersoon", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("DeelnemersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.Golfdag", null)
                        .WithMany()
                        .HasForeignKey("GolfdagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BerghAdmin.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BerghAdmin.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BerghAdmin.Authorization.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersoonRol", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("PersonenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.Rol", null)
                        .WithMany()
                        .HasForeignKey("RollenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersoonVerzondenMail", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("GeadresseerdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.VerzondenMail", null)
                        .WithMany()
                        .HasForeignKey("GeadresseerdenId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersoonVerzondenMail1", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("ccGeadresseerdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.VerzondenMail", null)
                        .WithMany()
                        .HasForeignKey("ccGeadresseerdenId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersoonVerzondenMail2", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", null)
                        .WithMany()
                        .HasForeignKey("bccGeadresseerdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.VerzondenMail", null)
                        .WithMany()
                        .HasForeignKey("bccGeadresseerdenId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BerghAdmin.Data.Persoon", b =>
                {
                    b.HasOne("BerghAdmin.Data.Donateur", null)
                        .WithOne()
                        .HasForeignKey("BerghAdmin.Data.Persoon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BerghAdmin.Data.Kentaa.BihzProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BerghAdmin.Data.Sponsor", b =>
                {
                    b.HasOne("BerghAdmin.Data.Persoon", "Compagnon")
                        .WithMany()
                        .HasForeignKey("CompagnonId");

                    b.HasOne("BerghAdmin.Data.Persoon", "ContactPersoon1")
                        .WithMany()
                        .HasForeignKey("ContactPersoon1Id");

                    b.HasOne("BerghAdmin.Data.Persoon", "ContactPersoon2")
                        .WithMany()
                        .HasForeignKey("ContactPersoon2Id");

                    b.HasOne("BerghAdmin.Data.Donateur", null)
                        .WithOne()
                        .HasForeignKey("BerghAdmin.Data.Sponsor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compagnon");

                    b.Navigation("ContactPersoon1");

                    b.Navigation("ContactPersoon2");
                });

            modelBuilder.Entity("BerghAdmin.Data.Ambassadeur", b =>
                {
                    b.HasOne("BerghAdmin.Data.Sponsor", null)
                        .WithOne()
                        .HasForeignKey("BerghAdmin.Data.Ambassadeur", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BerghAdmin.Data.GolfdagSponsor", b =>
                {
                    b.HasOne("BerghAdmin.Data.Sponsor", null)
                        .WithOne()
                        .HasForeignKey("BerghAdmin.Data.GolfdagSponsor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BerghAdmin.Data.Donateur", b =>
                {
                    b.Navigation("Donaties");
                });

            modelBuilder.Entity("BerghAdmin.Data.Persoon", b =>
                {
                    b.Navigation("BihzActie");

                    b.Navigation("BihzUser");
                });

            modelBuilder.Entity("BerghAdmin.Data.Ambassadeur", b =>
                {
                    b.Navigation("MagazineJaren");
                });
#pragma warning restore 612, 618
        }
    }
}
