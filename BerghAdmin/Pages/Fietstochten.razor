@page "/Fietsers/Tochten"

@using BerghAdmin.Data
@using BerghAdmin.Services.Evenementen

@inject IJSRuntime jsRuntime
@inject BerghAdmin.Services.IPersoonService persoonService
@inject BerghAdmin.Services.Evenementen.IEvenementService evenementService

@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

@attribute [Authorize(Policy = "BeheerFietsers")]

<h3>Fietstochten</h3>

@*
    The grid showing all fietstochten
*@
<SfGrid DataSource="@FietsTochtList" SelectedRowIndex=0
        ContextMenuItems="@(new List<ContextMenuItemModel>() { 
                                new ContextMenuItemModel { Text = "Toevoegen Renner", Target = ".e-content", Id = "add-renner" },
                                new ContextMenuItemModel { Text = "Verwijderen renner", Target = ".e-content", Id = "delete-renner" },
                                new ContextMenuItemModel { Text = "Stuur email", Target = ".e-content", Id = "send-email" },
                            })">
    <GridEditSettings 
        AllowAdding="true" 
        AllowDeleting="true" 
        AllowEditing="true" 
        Mode="EditMode.Dialog" 
        AllowEditOnDblClick="true">
    </GridEditSettings>
    <GridEvents RowSelected="SelectFietsTocht" TValue="FietsTocht" />
@*    <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="FietsTocht" />
*@
    <GridColumns>
        <GridColumn Field=@nameof(FietsTocht.Id) HeaderText="Id" TextAlign="TextAlign.Left" Width="0" IsPrimaryKey="true"></GridColumn>
        <GridColumn Field=@nameof(FietsTocht.Titel) HeaderText="Titel" TextAlign="TextAlign.Left"  Width="110"></GridColumn>
        <GridColumn Field=@nameof(FietsTocht.GeplandeDatum) HeaderText="Datum" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left"  Width="70"></GridColumn>
        <GridColumn Field=@nameof(FietsTocht.AantalDeelnemers) HeaderText="# deelnemers" TextAlign="TextAlign.Left"  Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

<br />
<div class='e-statustext'>Deelnemers aan fietstocht: <b>@SelectedFietsTocht.Titel</b></div>
<SfGrid DataSource="@DeelnemerList">
    <GridColumns>
        <GridColumn Field=@nameof(Persoon.VolledigeNaam) HeaderText="Naam" TextAlign="TextAlign.Left"  Width="110"></GridColumn>
        <GridColumn Field=@nameof(Persoon.GeboorteDatum) HeaderText="Geb.datum" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left"  Width="70"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Mobiel) HeaderText="Mobiel" TextAlign="TextAlign.Left"  Width="70"></GridColumn>
        <GridColumn Field=@nameof(Persoon.EmailAdres) HeaderText="Email" TextAlign="TextAlign.Left"  Width="120"></GridColumn>
        <GridColumn Field=@nameof(Persoon.GetRollenAsString) HeaderText="Rollen" TextAlign="TextAlign.Left"  Width="200"></GridColumn>
    </GridColumns>
</SfGrid>

<SendMailDialog @ref="sendMailDialog"></SendMailDialog>
<EditPersoonDialog @ref="editPersoonDialog"></EditPersoonDialog>

@code
{
    // Everything to handle persons
    public IEnumerable<FietsTocht> FietsTochtList;
    public IEnumerable<Persoon> DeelnemerList { get; set; }
    public FietsTocht SelectedFietsTocht { get; set; } = new();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("SetSideMenu", "fietser");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshList();
    }

    public void SelectFietsTocht(RowSelectEventArgs<FietsTocht> args)
    {
        SelectedFietsTocht = args.Data;
        DeelnemerList = SelectedFietsTocht.Deelnemers;
    }

    public void ActionCompletedHandler(ActionEventArgs<FietsTocht> args)
    {
        // Here you can customize your code
    }

    public Task RefreshList()
    {
        FietsTochtList = GetFietsTochten();
        var fietsTocht = FietsTochtList.ElementAt(0);
        if (fietsTocht != null)
        {
            SelectedFietsTocht = fietsTocht;
            DeelnemerList = fietsTocht.Deelnemers;
        }       
        return Task.CompletedTask;
    }

    private IEnumerable<FietsTocht> GetFietsTochten()
    {
        var fietsTochten = evenementService
                    .GetAllFietsTochten()
                    .OrderByDescending(ft => ft.GeplandeDatum)
                    .ToList<FietsTocht>();

        return fietsTochten;
    }

    // Everything to handle the email dialog
    SendMailDialog sendMailDialog = new();
    private void ShowSendMailDialog()
    {
        sendMailDialog.DialogOpen();
    }

    // Everything to handle the edit persoon dialog
    EditPersoonDialog editPersoonDialog = new();

    // Everything to handle the context menu
    // Triggers when the item is selected
    public void OnContextMenuClick(ContextMenuClickEventArgs<FietsTocht> args)
    {
        if (args.Item.Id == "add-renner")
        {
            return;
        }
        if (args.Item.Id == "delete-renner")
        {
            return;
        }
        if (args.Item.Id == "send-email")
        {
            // TODO:
            // get a list of all persons to send email to
            // pass it to next funtion
            ShowSendMailDialog();
            return;
        }
    }

}
