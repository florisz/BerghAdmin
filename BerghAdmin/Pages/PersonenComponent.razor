@using System.Linq;
@using BerghAdmin.Services.Configuration
@using BerghAdmin.Authorization;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Authorization

@using BerghAdmin.Data
@using BerghAdmin.Pages
@using System.Security.Claims


@inject BerghAdmin.Services.IPersoonService persoonService
@inject BerghAdmin.Services.IRolService rolService

@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

@attribute [Authorize(Policy = "IsAnyRole")]

<div class="responsive-align">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item">
            <label class="col-form-label">Overzicht van:</label>
            <SfMultiSelect 
                    TValue="RolTypeEnum[]" 
                            TItem="Rol"
                            ClosePopupOnSelect="false"
                            @bind-Value="@RolContext"
                            Placeholder="e.g Ambassadeur, Fietser, Golfer"
                            Mode="VisualMode.Box"
                            DataSource="@rollenList"
                            Width="700px"
                            ShowDropDownIcon="true"
                            ModelType="typeof(Rol)" >
                <MultiSelectFieldSettings Value="Id" Text="Beschrijving"></MultiSelectFieldSettings>
                <MultiSelectTemplates TItem="Rol">
                    <ItemTemplate>
                        @{
                            var contextValue = (context as Rol);
                            bool isChecked = RolContext != null ? RolContext.Contains(contextValue.Id) : false;

                            <span>
                                <SfCheckBox TChecked="bool" @bind-checked="@isChecked"></SfCheckBox>
                                @contextValue.Beschrijving
                            </span>
                        }
                    </ItemTemplate>
                </MultiSelectTemplates>
                <MultiSelectEvents 
                    TItem="Rol" 
                                    TValue="RolTypeEnum[]"
                                    OnValueSelect="@OnValueSelectHandler"
                                    ValueRemoved="@ValueRemovedHandler"
                                    Cleared="@ClearedHandler">
                </MultiSelectEvents>
            </SfMultiSelect>
        </div>
    </div>
    @* <AuthorizeView Policy="IsAdministrator"> *@
    <div class="row">
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4 search-item">
            <label class="col-form-label">Toon alle rollen</label>
                <SfCheckBox TChecked="bool" @bind-Checked="@ToonAlles" @onchange="onToonAllesChange" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4 search-item">
            <label class="col-form-label">Inclusief Verwijderd</label>
            <SfCheckBox TChecked="bool" @bind-Checked="@ToonVerwijderd" @onchange="onToonVerwijderdChange" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4 search-item">
            <label class="col-form-label">Zonder Reserves</label>
            <SfCheckBox TChecked="bool" @bind-Checked="@ZonderReserves" @onchange="onZonderReservesChange" />
        </div>
    </div>
</div>

    @* </AuthorizeView> *@
<br />
@*
    The grid showing all persons
*@
<SfGrid @ref="@PersonenGrid"
        DataSource="@personenList"
        AllowPaging="true"
        AllowResizing="true"
        AllowSelection="true"
        ShowColumnMenu="true"
        ContextMenuItems="@(new List<ContextMenuItemModel>() {
                                new ContextMenuItemModel { Text = "Toevoegen persoon", Target = ".e-content", Id = "add-persoon" },
                                new ContextMenuItemModel { Text = "Wijzig persoon", Target = ".e-content", Id = "edit-persoon" },
                                new ContextMenuItemModel { Text = "Stuur email", Target = ".e-content", Id = "send-email" },
                                new ContextMenuItemModel { Text = "Kopieer emailadres(sen)", Target = ".e-content", Id = "copy-emailaddresses" },
                            })">
    <GridEditSettings 
        AllowAdding="true" 
        AllowDeleting="true"
        AllowEditing="true"
        Mode="EditMode.Dialog"
        AllowEditOnDblClick="false">
    </GridEditSettings>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Text="Wijzig" TooltipText="Wijzig persoon" PrefixIcon="e-icons edit" Align="ItemAlign.Left" OnClick="EditPersoon" />
            <ToolbarItem Text="Toevoegen" TooltipText="Toevoegen persoon" PrefixIcon="e-icons circle-add" Align="ItemAlign.Left" OnClick="AddPersoon" />
            <ToolbarItem Text="Email" TooltipText="Stuur email" PrefixIcon="e-icons send" Align="ItemAlign.Left" OnClick="ShowSendMailDialog" />
            <ToolbarItem Text="Kopieer" TooltipText="Kopieer email adressen" PrefixIcon="e-icons copy" Align="ItemAlign.Left" OnClick="CopySelectedEmailAddressesAsync" />
            <ToolbarItem Text="Export" TooltipText="Export naar excel" PrefixIcon="e-icons export" Align="ItemAlign.Left" OnClick="ExportToExcelAsync" />
            <ToolbarItem Type="ItemType.Input" Align="Syncfusion.Blazor.Navigations.ItemAlign.Right">
                <Template>
                    <SfTextBox Placeholder="Enter values to search" Input="OnInputSearchString"></SfTextBox>
                    <span class="e-search-icon e-icons"></span>
                </Template>
            </ToolbarItem>
        </ToolbarItems>
    </SfToolbar>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" PersistSelection="true"></GridSelectionSettings>
    <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="Persoon" />

    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="25"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Id) HeaderText="Id" TextAlign="TextAlign.Left" Width="0" IsPrimaryKey="true" Visible="false" />
        <GridColumn Field=@nameof(Persoon.VolledigeNaam) HeaderText="Naam" TextAlign="TextAlign.Left" Width="110" />
        <GridColumn Field=@nameof(Persoon.GeboorteDatum) HeaderText="Geb.datum" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="70"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Mobiel) HeaderText="Mobiel" TextAlign="TextAlign.Left" Width="70"></GridColumn>
        <GridColumn Field=@nameof(Persoon.EmailAdres) HeaderText="Email" TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Persoon.GetRollenAsString) HeaderText="Rollen" TextAlign="TextAlign.Left" Width="200"></GridColumn>
        <GridColumn Field=@nameof(Persoon.IsVerwijderd) HeaderText="Status" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" Width="150">
            <Template>
                @{
                    var persoon = (Persoon)context;
                    if (! persoon.IsVerwijderd)
                    {
                        if (!persoon.IsReserve)
                        {
                            <div class="statustemp e-activecolor">
                                <span class="statustxt e-activecolor">Actief</span>
                            </div>
                        }
                        else
                        {
                            <div class="statustemp e-activereservecolor">
                                <span class="statustxt e-activecolor">Actief (reserve)</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="statustemp e-inactivecolor">
                            <span class="statustxt e-inactivecolor">Inactief</span>
                        </div>
                    }
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SendMailDialog @ref="sendMailDialog" />
<EditPersoonDialog @ref="editPersoonDialog" />
<ErrorDialog @ref="errorDialog" />


@code {
    [Parameter]
    public RolTypeEnum[] RolContext { get; set; } = Array.Empty<RolTypeEnum>();
    [Parameter]
    public bool ToonAlles { get; set; } = false;
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationStateTask { get; set; }

    private ErrorDialog errorDialog = new();

    private User? CurrentUser;

    private bool ToonVerwijderd { get; set; } = false;
    private bool ZonderReserves { get; set; } = false;

    // search in the grid functionaity
    public void OnInputSearchString(InputEventArgs args)
    {
        this.PersonenGrid.Search(args.Value);
    }

    // Everything to handle the email dialog
    SendMailDialog sendMailDialog = new();
    private async void ShowSendMailDialog()
    {
        if (string.IsNullOrWhiteSpace(CurrentUser?.Email))
        {
            return;
        }

        List<MailAddress> selectedAddresses = await GetSelectedEmailAddresses();
        MailMessage message = new()
        {
            From = new MailAddress(CurrentUser.Email, CurrentUser.Name),
            To = selectedAddresses
        };
        sendMailDialog.Message = message;
        sendMailDialog.DialogOpen();
    }

    private async Task CopySelectedEmailAddressesAsync()
    {
        List<MailAddress> selectedAddresses = await GetSelectedEmailAddresses();
        string emailAddresses = string.Join(';', selectedAddresses.Select(a => a.Address));
        await jsRuntime.InvokeVoidAsync("clipboardApi.copyTextToClipboard", emailAddresses, $"Emailaddressen naar klembord gekopieerd.");
    }

    private async Task<List<MailAddress>> GetSelectedEmailAddresses()
    {
        var emailAddressesList = new List<MailAddress>();
        var selectedPersonenWithMailAddress = (await this.PersonenGrid.GetSelectedRecordsAsync())
            .Where(p => !string.IsNullOrWhiteSpace(p.EmailAdres));
        foreach (var persoon in selectedPersonenWithMailAddress)
        {
            emailAddressesList.Add(new(persoon.EmailAdres, persoon.VolledigeNaam));
        }
        return emailAddressesList;
    }

    // export to excel
    private async Task ExportToExcelAsync()
    {
        // TO DO....
    }

    // Everything to handle the edit persoon dialog
    EditPersoonDialog editPersoonDialog = new();

    // Everything to handle the context menu
    // Triggers when the item is selected
    public async Task OnContextMenuClick(ContextMenuClickEventArgs<Persoon> args)
    {
        if (args.Item.Id == "edit-persoon" || args.Item.Id == "add-persoon")
        {
            var persoon = args.Item.Id == "edit-persoon" ? args.RowInfo.RowData as Persoon : new Persoon();
            editPersoonDialog.ShowDialog(persoon, rollenList, PersonenGrid);
            return;
        }
        if (args.Item.Id == "send-email")
        {
            ShowSendMailDialog();
            return;
        }
        if (args.Item.Id == "copy-emailaddresses")
        {
            await CopySelectedEmailAddressesAsync();
            return;
        }
    }

    private async Task EditPersoon()
    {
        // get selected personen first
        var selectedPersonen = await this.PersonenGrid.GetSelectedRecordsAsync();
        if (selectedPersonen.Count == 0)
        {
            errorDialog.Show("Selecteer eerst een persoon.");
        }
        else if (selectedPersonen.Count > 1)
        {
            errorDialog.Show("Er zijn meerdere personen geselecteerd. Selecteer eerst een persoon of gebruik de rechtermuisclick.");
        }
        else
        {
            // open the edit dialog for the selected person
            editPersoonDialog.ShowDialog(selectedPersonen.ElementAt(0), rollenList, PersonenGrid);
        }
    }

    private async Task AddPersoon()
    {
        var persoon = new Persoon();
        // open the edit dialog for a this new person
        editPersoonDialog.ShowDialog(persoon, rollenList, PersonenGrid);
    }


    // Everything to handle persons
    public List<RolTypeEnum> selectedRollen = new();
    public List<Persoon> personenList = new();
    public List<Rol> rollenList = new();
    SfGrid<Persoon> PersonenGrid = new();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        selectedRollen = RolContext.ToList<RolTypeEnum>();
        rollenList = GetRollen();
        await RefreshList();

        if (_authenticationStateTask != null)
        {            
            var authenticationState = await _authenticationStateTask;
            CurrentUser = await UserManager.GetUserAsync(authenticationState?.User);
        }
    }

    private void ValueRemovedHandler(Syncfusion.Blazor.DropDowns.RemoveEventArgs<Rol> args)
    {
        selectedRollen.Remove(args.ItemData.Id);
        RefreshList();
    }

    private void OnValueSelectHandler(Syncfusion.Blazor.DropDowns.SelectEventArgs<Rol> args)
    {
        selectedRollen.Add(args.ItemData.Id);
        RefreshList();
    }

    private void ClearedHandler(MouseEventArgs args)
    {
        selectedRollen = new List<RolTypeEnum>();
        RefreshList();
    }

    public void ActionCompletedHandler(ActionEventArgs<Persoon> args)
    {
        // Here you can customize your code
    }

    private void onToonAllesChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        RefreshList();
    }

    private void onToonVerwijderdChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        RefreshList();
    }

    private void onZonderReservesChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        RefreshList();
    }

    public Task RefreshList()
    {
        // refresh with value from multiselect dropdown box
        if (!ToonAlles && (selectedRollen == null || selectedRollen.Count<RolTypeEnum>() == 0))
        {
            personenList = new List<Persoon>();
        }
        else
        {
            personenList = GetPersonen(selectedRollen).OrderBy(p => p.Achternaam).ToList<Persoon>();
        }
        return Task.CompletedTask;
    }

    private List<Persoon> GetPersonen(List<RolTypeEnum> rolTypes)
    {
        var personen = new List<Persoon>();

        if (ToonAlles)
        {
            // also show persons with no role
            if (ToonVerwijderd)
            {
                personen = persoonService
                            .GetPersonen()!
                            .ToList<Persoon>();
            }
            else
            {
                personen = persoonService
                            .GetPersonen()!
                            .Where(p => !p.IsVerwijderd)
                            .ToList<Persoon>();
            }
        }
        else
        {
            // select persons with specified rol only
            var currentRollen = rollenList
                                .Where(r => rolTypes.Contains(r.Id))
                                .ToList<Rol>();

            personen = persoonService
                        .GetPersonen()!
                        .Where(p => !p.IsVerwijderd)
                        .Where(p => p.Rollen.FirstOrDefault(r => rolTypes.Contains(r.Id)) != null)
                        .ToList<Persoon>();
            if (ZonderReserves)
            {
                personen = personen
                        .Where(p => p.IsReserve == false)
                        .ToList<Persoon>();
            }
        }

        return personen;
    }

    private List<Rol> GetRollen()
    {
        // TODO
        // Get list of all rollen based on enum
        var rollenList = rolService
                        .GetRollen()
                        .OrderBy(r => r.Beschrijving)
                        .ToList<Rol>();
        return rollenList;
    }

}
<style>
    .statustemp {
        position: relative;
        height: 19px;
        border-radius: 5px;
        text-align: center;
    }

    .statustemp.e-inactivecolor {
        background-color: #ffd7cc;
        width: 64px;
    }

    .statustemp.e-activecolor {
        background-color: #ccffcc;
        width: 57px;
        cursor: pointer;
    }

    .statustemp.e-activereservecolor {
        background-color: #fffecc;
        width: 107px;
        cursor: pointer;
    }

    td.e-rowcell {
        cursor: pointer;
    }

    td.e-rowcell .statustxt.e-inactivecolor {
        color: #e60000;
        position: relative;
        top: 0px;
    }

    td.e-rowcell .statustxt.e-activecolor {
        color: #00cc00;
        position: relative;
        top: 0px;
    }

    td.e-rowcell .reservediv.reserve {
        color: #900C3F;
    }

    td.e-rowcell .reservediv.no-reserve {
        color: #166344;
    }

</style>
