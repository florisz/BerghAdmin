@page "/Ambassadeurs/Facturen"

@using BerghAdmin.Authorization
@using BerghAdmin.Data
@using BerghAdmin.DbContexts
@using BerghAdmin.Pages.Mail
@using BerghAdmin.Pages.Personen
@using BerghAdmin.Services.DateTimeProvider
@using BerghAdmin.Services.Facturen
@using BerghAdmin.Services.Sponsoren
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.HttpResults
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.SfPdfViewer

@inject IJSRuntime jsRuntime
@inject ILogger<Ambassadeurs> _logger
@inject NavigationManager _navigationManager
@inject ISendMailService _sendMailService
@inject IMailAttachmentsService _mailAttachmentsService;
@inject SfDialogService DialogService
@inject UserManager<User> _userManager
@inject IDateTimeProvider _dateTimeProvider
@inject IFactuurService _factuurService
@inject IHttpContextAccessor _httpContextAccessor

@attribute [Authorize(Policy = "IsBeheerAmbassadeurs")]

<h3>Facturen - Ambassadeurs</h3>

@*
    The grid showing all facturen
*@
<SfGrid @ref="@_factuurGrid"
        DataSource="@_factuurList"
        AllowPaging="true"
        AllowResizing="true"
        AllowSelection="true"
        AllowExcelExport="true"
        ShowColumnMenu="true"
        ContextMenuItems="@(new List<ContextMenuItemModel>() {
                                new ContextMenuItemModel { Text = "Toon factuur", Target = ".e-content", Id = "show-factuur" },
                            })">
    <GridEditSettings AllowAdding="true"
                      AllowDeleting="true"
                      AllowEditing="true"
                      Mode="EditMode.Dialog"
                      AllowEditOnDblClick="false">
    </GridEditSettings>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Text="Open" TooltipText="Open factuur" PrefixIcon="e-icons e-edit" Align="ItemAlign.Left"  />
            <ToolbarItem Text="Email" TooltipText="Stuur factuur" PrefixIcon="e-icons e-send" Align="ItemAlign.Left" />
            <ToolbarItem Text="Export" TooltipText="Export naar excel" PrefixIcon="e-icons e-export" Align="ItemAlign.Left" />
        </ToolbarItems>
    </SfToolbar>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" PersistSelection="true"></GridSelectionSettings>
    <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="Factuur" />

    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="25"></GridColumn>
        <GridColumn Field=@nameof(Factuur.Nummer) HeaderText="Nr" TextAlign="TextAlign.Left" Width="40" IsPrimaryKey="true" Visible="false" />
        <GridColumn Field=@nameof(Factuur.Omschrijving) HeaderText="Omschrijving" TextAlign="TextAlign.Left" Width="100" />
        <GridColumn Field=@nameof(Factuur.Datum) HeaderText="Datum" Format="d" Type="ColumnType.Date" Width="60" />
        <GridColumn Field=@nameof(Factuur.Bedrag) HeaderText="Bedrag" Type="ColumnType.Decimal" Format="C2" Width="60" />
        <GridColumn Field=@nameof(Factuur.FactuurType) HeaderText="Type" TextAlign="TextAlign.Left" Width="60" />
        <GridColumn Field=@nameof(Factuur.IsBetaald) HeaderText="Betaald?" Type="ColumnType.Boolean" Width="30" />
        <GridColumn Field=@nameof(Factuur.IsVerzonden) HeaderText="Verzonden?" Type="ColumnType.Boolean" Width="30" />
    </GridColumns>
</SfGrid>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationStateTask { get; set; }

    SfGrid<Factuur> _factuurGrid = new();
    public string _documentPath { get; set; } = "";
    public List<Factuur> _factuurList = new();
    SendMailDialog sendMailDialog = new();
    private ConfirmDialog confirmDialog = new();
    private User? CurrentUser;
    private bool ToonVerwijderd { get; set; } = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("SetSideMenu", "ambassadeur");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _logger.LogDebug($"Factuur page initialized; threadid={Thread.CurrentThread.ManagedThreadId}");

        await RefreshList();

        if (_authenticationStateTask != null)
        {
            var authenticationState = await _authenticationStateTask;
            CurrentUser = await _userManager.GetUserAsync(authenticationState?.User);
        }
    }

    public async Task RefreshList()
    {
        _factuurList = await GetFacturen();
        await _factuurGrid.AutoFitColumnsAsync();
    }

    // Everything to handle the context menu
    // Triggers when the item is selected
    public async Task OnContextMenuClick(ContextMenuClickEventArgs<Factuur> args)
    {
        if (args.Item.Id == "show-factuur")
        {
            var factuur = args.RowInfo.RowData as Factuur;
            await ShowFactuur(factuur.Id);
            return;
        }
    }


    private async Task<List<Factuur>> GetFacturen()
    {
        var facturen = await _factuurService.GetFacturenAsync(_dateTimeProvider.Now.Year);
        if (facturen != null)
        {
            return facturen.ToList();
        }
        facturen = facturen!
                        .OrderBy(f => f.Nummer)
                        .ToList<Factuur>();

        return facturen!;
    }

    private async Task ShowFactuur(int id)
    {
        _navigationManager.NavigateTo($"ShowPdf?FactuurId={id}");
    }
}
