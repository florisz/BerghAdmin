@page "/"

@*
    !!
    this is all test code
    !!
*@


@using BerghAdmin.Data
@using BerghAdmin.Services.Context


@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject IContextService contextService

<SfListBox TValue="string[]" DataSource="@Users" TItem="User" @bind-Value="@selectedRole">
    <ListBoxFieldSettings Text="Name" Value="Id" />
    <ListBoxSelectionSettings></ListBoxSelectionSettings>
</SfListBox>

<SfButton @onclick="onClick" CssClass="e-flat" IsPrimary="true" Content="Selecteer rol"></SfButton>

<br />
<br />

<span> @ErrorMessage </span>

@code {

    public List<User> Users = new List<User>
    {
        new User { Id = 1, Name = "Lars Peter (secretariaat)", EmailAddress = "secretaris@berghinhetzadel.nl", Roles = new string[] { "Secretaris" } },
        new User { Id = 2, Name = "Wim (ambassadeurs beheer", EmailAddress = "ambassadeur@berghinhetzadel.nl", Roles = new string[] { "AmbassadeurBeheer" } },
        new User { Id = 3, Name = "Gerard (golfers beheer)", EmailAddress = "Golfdagbergh@berghinhetzadel.nl", Roles = new string[] { "GolferBeheer" } },
        new User { Id = 4, Name = "Wilburt (fietsers beheer)", EmailAddress = "Fietsen@berghinhetzadel.nl", Roles = new string[] { "FietserBeheer" } },
        new User { Id = 5, Name = "Ingrid (financien)", EmailAddress = "Penningmeester@berghinhetzadel.nl", Roles = new string[] { "Penningmeester" } },
        new User { Id = 6, Name = "Floris (applicatie beheer)", EmailAddress = "fzwarteveen@gmail.com", Roles = new string[] { "ApplicatieBeheer" } },
    };
    public string[]? selectedRole;
    string ErrorMessage = "";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("SetSideMenu", "shared");
    }

    private void onClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        ErrorMessage = "";
        if (selectedRole == null || selectedRole.Length == 0 || selectedRole[0] == "")
        {
            ErrorMessage = "Selecteer eerst een rol, click daarna de button.";
        }
        else
        {
            var id = int.Parse(selectedRole[0]);
            contextService.Context.CurrentUser = Users.Find(u => u.Id == id) ?? throw new ArgumentException($"Gebruiker met Id {id} niet gevonden");
            NavigateTo("Home");
        }
    }

    private void NavigateTo(string relativeUrl) 
    {
        var uri = new Uri(new Uri(NavigationManager.BaseUri), relativeUrl); 

        NavigationManager.NavigateTo(uri.ToString());
    }

}
