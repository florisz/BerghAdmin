@page "/personen"

@using bihz.kantoorportaal.Data
@using Microsoft.AspNetCore.WebUtilities
@inject bihz.kantoorportaal.Services.IPersoonService persoonService
@inject bihz.kantoorportaal.Services.IRolService rolService
@inject NavigationManager NavigationManager

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations

<SfGrid DataSource="@personen" Toolbar="@ToolbarItems" AllowPaging="true" >
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" AllowEditOnDblClick="true"></GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Persoon.Id) HeaderText="Id" IsPrimaryKey="true" TextAlign="TextAlign.Left"  Width="120"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Voornaam) HeaderText="Voornaam" TextAlign="TextAlign.Left"  Width="120"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Achternaam) HeaderText="Achternaam" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Persoon.Mobiel) HeaderText="Mobiel" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right"  Width="130"></GridColumn>
    </GridColumns>
</SfGrid>

@code{
    private string searchString = "";
    private Rol currentRol;
    private string currentRolDescription = "";

    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel" };
    private Persoon persoon = new Persoon();
    private List<Persoon> personen = new List<Persoon>();
    private List<Rol> allRollen = new List<Rol>();
    Func<Rol,string> rolBeschrijving = r => r?.Beschrijving;
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        GetRollen();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rol", out var _rol))
        {
            if (_rol == "Alle")
            { 
                currentRol = null;
                currentRolDescription = "Alle personen";
                GetPersonen();
            }
            else
            {
                currentRol = allRollen.FirstOrDefault<Rol>(r => r.Beschrijving == _rol);
                currentRolDescription = currentRol.MeervoudBeschrijving;
                GetPersonen();
            } 
        }
    }

    private List<Persoon> GetPersonen()
    {
        if (currentRol == null)
        {
            personen = persoonService
                        .GetPersonen();
        }
        else
        {
            personen = persoonService
                        .GetPersonen()
                        .Where(p => p.Rollen.Contains(currentRol))
                        .ToList<Persoon>();
        }
        return personen;
    }
    private List<Rol> GetRollen()
    {
        allRollen = rolService
                        .GetRollen()
                        .OrderBy(r => r.Beschrijving)
                        .ToList<Rol>();
        return allRollen;
    }
    private bool Search(Persoon persoon)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (persoon.Voornaam.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || persoon.Achternaam.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || persoon.Mobiel.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        persoonService.SavePersoon(persoon);
        persoon = new Persoon();
        GetPersonen();
    }
    private void Edit(int id)
    {
        persoon = personen.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        persoonService.DeletePersoon(id);
        GetPersonen();
    }

}