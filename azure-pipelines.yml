# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: BuildAndTest
  displayName: Build and Test
  pool:
    vmImage: ubuntu-latest
  
  jobs:
  - job: Build_Test_Publish
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish website'
      inputs:
        command: 'publish'
        arguments: '-o $(Build.ArtifactStagingDirectory)'
        projects: '**/*.csproj'
        publishWebProjects: false
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy2BerghTest
  jobs:
  - job: deploy_to_bergh_test
    displayName: Deploy to Bergh Test
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      
    - task: AzureRmWebAppDeployment@4
      displayName: Deploy Bergh Admin site
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'bergh-test-azurerm'
        appType: 'webAppLinux'
        WebAppName: 'bergh-test-bergh-admin-webapp'
        packageForLinux: '$(System.ArtifactsDirectory)/**/BerghAdmin.zip'
        RuntimeStack: 'DOTNETCORE|6.0'

    - task: AzureRmWebAppDeployment@4
      displayName: Deploy Bergh Monitor site
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'bergh-test-azurerm'
        appType: 'webAppLinux'
        WebAppName: 'bergh-test-bergh-monitor-webapp'
        packageForLinux: '$(System.ArtifactsDirectory)/**/BerghMonitor.Web.zip'
        RuntimeStack: 'DOTNETCORE|6.0'

    - task: AzureFunctionApp@1
      displayName: Deploy Kentaa Function
      inputs:
        azureSubscription: 'bergh-test-azurerm'
        appType: 'functionAppLinux'
        appName: 'bergh-test-functionapp-kentaa'
        package: '$(System.ArtifactsDirectory)/**/BerghAdmin.KentaaFunction.zip'